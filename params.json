{"name":"Avdecc-lib","tagline":"Simple C++ library for implementing IEEE1722.1 (AVB Device Enumeration, Discovery and Control)","body":"avdecc-lib\r\n==========\r\n\r\nSimple C++ library for implementing IEEE1722.1 (AVB Device Enumeration, Discovery and Control).\r\n\r\n\r\nIntroduction\r\n------------\r\n\r\nThis library aims to simplify development of an AVDECC Controller based on the IEEE1722.1 specification.\r\nIt provides a simple C++ object interface to 1722.1 objects and implements device discovery and enumeration\r\nas a background process.\r\n\r\nThe repository contains source to build a Windows DLL or a Linux library and a command line application for\r\nexercising the library.\r\n\r\nThe overall philosophy of AVDECC LIB is to implement a thin layer of commands that allow an application to\r\ndiscover and control AVDECC capable End Stations. The internal operations of the library are designed to be single threaded,\r\nalthough multiple threads are used to queue operations to be performed by the single threaded \"engine\" portion of the library.\r\nThe library supports notification events (callbacks) that are triggered on the success (or failure) of a command. \r\nIt is up to the application to process the notifications in a useful manner. Asynchronous descriptor updates from an\r\nEnd Station are also supported. A descriptor notification does not have data about the updated descriptor values embedded\r\nin it. Instead the AVDECC application should query the descriptor class to obtain the updated values.\r\n\r\nOperations that \"fetch\" details or status of an End Station store the response for later readback by the controller application.\r\nAn example of this would be the AEM send_get_stream_info_cmd() operation whose response is stored in the appropriate stream input object in avdecc-lib.\r\nFunctions get_stream_info_msrp_accumulated_latency(), get_stream_info_msrp_failure_code() and others can then be used to readback fields of the response.\r\n\r\nUsers developing 1722.1 end stations and controllers are encouraged to add new descriptors to this library as required.\r\nThe library provides an easy entry point for adding and testing a completely new 1722.1 descriptor without having\r\nto develop a complete controller side 1722.1 software stack.\r\n\r\nDependencies\r\n------------\r\n\r\nUses Jeff Koftinoff's packet processing library, see <https://github.com/jdkoftinoff/jdksavdecc-c.git>\r\nThis is a submodule that can be cloned using:\r\n\r\n\tcd avdecc-lib\r\n\tgit submodule init\r\n\tgit submodule update\r\n\r\nAs of March 2014, avdecc-lib is following the master branch of jdksavdecc-c (from github).\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nSpecial thanks are owed to Jeff Koftinoff for creating and releasing public source for 1722.1 packet processing in\r\nthe jdksavdecc-c library and for comments and advice freely given during the development of this library. This C++\r\nlibrary is a rather thin wrapper around functions already present in the jdksavdecc-c library.\r\n\r\nCommunity\r\n---------\r\n\r\nPlease join Google Group \"avdecc-lib\" if you wish to comment on avdecc-lib, or keep track of discussions.\r\n\r\n\r\nDirectory layout\r\n----------------\r\n\r\n\tcontroller\\\t\r\n\t\tlib\\\r\n\t\t\tbin\\\r\n\t\t\tdoc\\\r\n\t\t\tbinding\\\r\n\t\t\t\tpython\\\r\n\t\t\tinclude\\ (contains public header files)\r\n\t\t\tsrc\\ (contains private header files and C++ source code)\r\n\t\t\t\tlinux\\ (linux specific files)\r\n\t\t\t\tmsvc\\ (Microsoft Visual Studio specific files)\r\n\t\t\t\t\r\n\t\tapp\\\r\n\t\t\tbin\\\r\n\t\t\tdoc\\\r\n\t\t\tcmdline\\\r\n\t\t\t\tsrc\\\r\n\t\t\ttest\\\r\n\t\t\t\tstrings\\\r\n\t\t\t\tadp\\\r\n\t\t\t\tlogging\\ \r\n\t\t\t\tnotify\\\t\t\r\n\t\t\t\t\r\nObject hierarchy\r\n----------------\r\n \r\n\tSystem\r\n\tController\r\n\t\tEnd Station[1..N]\r\n\t\t\tEntity[1..N]\r\n\t\t\t\tConfiguration[1..N]\r\n\t\t\t\t\tAudio Unit[1..N]\r\n\t\t\t\t\t\t\tStream Port Input[0..N]\r\n\t\t\t\t\t\t\t\t\t\tAudio Cluster[0..N]\r\n\t\t\t\t\t\t\t\t\t\tAudio Map[0..N]\r\n\t\t\t\t\t\t\t\t\t\tControl[0..N]\r\n\t\t\t\t\t\t\tStream Port Output[0..N]\r\n\t\t\t\t\t\t\t\t\t\tAudio Cluster[0..N]\r\n\t\t\t\t\t\t\t\t\t\tAudio Map[0..N]\r\n\t\t\t\t\t\t\t\t\t\tControl[0..N]\r\n\t\t\t\t\t\t\tExternal Port Input[0..N]\r\n\t\t\t\t\t\t\tExternal Port Output[0..N]\r\n\t\t\t\t\t\t\tInternal Port Input[0..N]\r\n\t\t\t\t\t\t\tInternal Port Output[0..N]\r\n\t\t\t\t\t\t\tControl[0..N]\r\n\t\t\t\t\t\t\tSignal Selector[0..N]\r\n\t\t\t\t\t\t\tMixer[0..N]\r\n\t\t\t\t\t\t\tMatrices[0..N]\r\n\t\t\t\t\t\t\tSplitter[0..N]\r\n\t\t\t\t\t\t\tCombiner[0..N]\r\n\t\t\t\t\t\t\tDemultiplexer[0..N]\r\n\t\t\t\t\t\t\tTranscoder[0..N]\r\n\t\t\t\t\t\t\tControl Block[0..N]\r\n\t\t\t\t\tStream Input[1..N]\r\n\t\t\t\t\tStream Output[1..N]\r\n\t\t\t\t\tJack Input[1..N]\r\n\t\t\t\t\tJack Output[1..N]\r\n\t\t\t\t\tAVB Interface[1..N]\r\n\t\t\t\t\tClock Source[1..N]\r\n\t\t\t\t\tClock Domain[1..N]\r\n\t\r\nBuilding\r\n--------\r\n\r\nAll build environments require\r\n\r\n1. cmake v2.8\r\n\r\nRun cmake to create the build dirctories for your environment.\r\n\r\n\tcd avdecc-lib\r\n\tcmake .\r\n\r\n### Windows ###\r\n\t\r\nPrerequisites\r\n\r\n1. MSVC 2013 or later\r\n2. winpcap development package from <http://www.winpcap.org/devel.htm>\r\n\r\nThe following environment variables must be defined:\r\n* WPCAP_DIR the directory where WinPcap is installed\r\n\r\nGet the lib from github:\r\n* Make and enter the project directory\r\n* git clone git://github.com/audioscience/avdecc-lib\r\n* cd avdecc-lib\r\n* git submodule init\r\n* Edit in .git/config, change url = git@github.com:jdkoftinoff/jdksavdecc-c.git to url = git ://github.com/jdkoftinoff/jdksavdecc-c.git\r\n* git submodule update\r\n\r\nCompile\r\n* Open command window to \"project folder\" AVDECC-Lib\r\n* Initialize compiler environment : \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat\" x86\r\n* cmake .\r\n* msbuild ALL_BUILD.vcxproj\r\n* cd controller\r\n* cmake .\r\n* msbuild ALL_BUILD.vcxproj\r\n\r\nRun\r\n* controller.dll located in : AVDECC-Lib\\avdecc-lib\\controller\\lib\\Debug\r\n* command line app located in : AVDECC-Lib\\avdecc-lib\\controller\\app\\cmdline\\Debug\r\n* Copy controller.dll to app folder\r\n* Run application\r\n\r\n\r\n### Linux ###\r\n\r\nPrerequisites\r\n\r\n1. gcc development environment (v4.8 or later)\r\n2. libedit\r\n3. readline library, may need to go \"sudo apt-get install libreadline5-dev\"\r\n\r\n### OSX ###\r\n\r\nPrerequisites: cmake installed (http://www.cmake.org/):\r\n\r\nGet the lib from github:\r\n* Make and enter the project directory\r\n* git clone git://github.com/audioscience/avdecc-lib --recursive\r\n\r\nCompile\r\n* cd avdecc-lib\r\n* cmake .\r\n* make\r\n\r\n\r\nOperations\r\n==========\r\n\r\nAVDECC Controller version\r\n-------------------------\r\n\r\nThe AVDECC Controller version number can be updated inside the version header file.\r\n\r\nAVDECC End Station Discovery\r\n----------------------------\r\n\r\nWhen the AVDECC system receives an AVDECC advertise message from an End Station, it proceeds to\r\nenumerate the End Station's complete object model, if it has not done so already. Upon completion\r\nof the enumeration process, a notification message is sent to the application.\r\n\r\nAVDECC AEM descriptor reads\r\n---------------------------\r\n\r\nA descriptor read by referencing the object the object of interest. Since the AVDECC system has\r\nalready read all descriptors, the read operation is completed without producing any network traffic.\r\n\r\nTo read the name of the first input jack, one would go:\r\n\r\n\tcontroller->end_station(0)->entity(0)->configuration(0)->input_stream(0)->get_name(name)\r\n\r\nAVDECC AEM commands\r\n-------------------\r\n\r\nAn AVDECC command is sent to the target object, ie:\r\n\r\n\tistream = controller->end_station(0)->entity(0)->configuration(0)->input_stream(0);\r\n\tid = (void *)notify_id;\r\n\t// put the notify_id value in a list somewhere\r\n\tistream->set_format(id, format,...);\r\n\tnotify_id++;\r\n\r\nCompletion results in a notification message of success or failure via the callback mechanism. An alternative calling\r\nsequence is to wait for the callback to complete in-line, ie:\r\n\r\n\tid = (void *)notify_id;\r\n\tavdecc_system->set_wait_for_next_cmd(id);\r\n\tistream = controller->end_station(0)->entity(0)->configuration(0)->input_stream(0);\r\n\tistream->set_format(id, format,...);\r\n\tstatus = avdecc_system->get_last_resp_status();\r\n\tnotify_id++;\r\n\r\nThe above examples place an uint32_t notify_id in a \"void *\" container. If the application writer is careful about\r\nobject creation and destruction, they may choose to place a C++ (or other language) object in the notify_id field.\r\n\r\nCallbacks\r\n---------\r\n\r\nThe following callback functions should be supplied. If NULL is passed in for the callback function, no callback will be invoked.\r\n\r\n\tvoid log_callback(void *log_user_obj, int32_t log_level, const char *log_msg, int32_t time_stamp_ms);\r\n\tvoid notification_callback(void *notification_user_obj, int32_t notification_type, uint64_t guid, uint16_t cmd_type, uint16_t desc_type, uint16_t desc_index, void *notification_id);\r\n\r\nWhen a controller internal thread calls the log_callback function that was invoked at controller create time,\r\nthe log_user_obj pointer that was passed in at that time is returned in the callback. The calling application\r\ncode use this void pointer to store a C++ class if that was helpful to the structure of the calling application.\r\nThe log_callback is called with log_level values of:\r\n* ERROR\r\n* WARNING\r\n* NOTICE\r\n* INFO\r\n* DEBUG\r\n* VERBOSE\r\n\t\r\nLike the log_callback function the notification callback returns a void \"user\" pointers as the first field in the callback.\r\nThe notification_callback is called with notification_type values of:\r\n* NO MATCH FOUND\r\n* END STATION CONNECTED\r\n* END STATION DISCONNECTED,\r\n* COMMAND TIMEOUT\r\n* RESPONSE RECEIVED\r\n* END_STATION_READ_COMPLETED\r\n\r\nSource code style\r\n-----------------\r\n\r\nSource code is auto-formatted using the astyle formatting tool. All submitted pull requests should be passed through astyle\r\nbefore the pull request is issued. The format to use is specified in the astyle_code_format option file in this\r\ndirectory. asytle is run from the command line using the following command sequence:\r\n\r\n\tAStyle --options=..\\avdecc-lib\\astyle_code_style.txt ..\\avdecc-lib\\controller\\lib\\include\\*.h\r\n\t\t\t ..\\avdecc-lib\\controller\\lib\\src\\*.h ..\\avdecc-lib\\controller\\lib\\src\\*.cpp\r\n\t\t\t ..\\avdecc-lib\\controller\\lib\\src\\msvc\\*.h ..\\avdecc-lib\\controller\\lib\\src\\msvc\\*.cpp\r\n\t\t\t \r\nSource documentation\r\n--------------------\r\n\r\nA standard tool, Doxygen, is used for generating documentation from the AVDECC Controller Lib source code.\r\nA link to the online version of the AVDECC Controller Lib documentation can be found at:\r\nhttp://www.audioscience.com/internet/download/sdk/avdecclib_usermanual_html/html/index.html\r\n\r\nDevelopment Conventions\r\n=======================\r\n\r\nDevelopers should add new features to the *staging* git branch. Periodically the *staging* git branch\r\nwill be merged to the *master* branch.\r\n\r\n![](git_dev_seq_uml.png)\r\n\r\n\r\nRoadmap\r\n=======\r\n\r\nWorking towards release version 1.0.0.\r\n\r\nRelease 1.0.0 supports:\r\n* all of the P1 Command/responses listed below.\r\n* Windows, linux and OSX builds.\r\n\r\nFuture features include:\r\n* security key passing\r\n* Layer 3 (IP)  interface\r\n* other descriptors as required\r\n\r\n\r\nStatus\r\n======\r\n\r\nCommand/Response | Priority | Implemented | Tested |\r\n-----------------|----------|-------------|--------|\r\nACQUIRE_ENTITY | P1 | Y | Y |\r\nLOCK_ENTITY | P1 | Y | Y |\r\nENTITY_AVAILABLE | P1 | Y | Y |\r\nCONTROLLER_AVAILABLE | P1 | Y | Y |\r\nREAD_DESCRIPTOR | P1 | Y | Y |\r\nSET_STREAM_FORMAT | P1 | Y | Y |\r\nGET_STREAM_FORMAT | P1 | Y | Y |\r\nSET_STREAM_INFO | P1 | | |\r\nGET_STREAM_INFO | P1 | Y | Y |\r\nSET_SAMPLING_RATE | P1 | Y | Y |\r\nGET_SAMPLING_RATE | P1 | Y | Y |\r\nSET_CLOCK_SOURCE | P1 | Y | Y |\r\nGET_CLOCK_SOURCE | P1 | Y | Y| \r\nSTART_STREAMING | P1 | Y | Y |\r\nSTOP_STREAMING | P1 | Y | Y |\r\nSET_CONFIGURATION | P2 | | |\r\nGET_CONFIGURATION | P2 | | |\r\nSET_CONTROL | P2 | | |\r\nGET_CONTROL | P2 | | |\r\nSET_NAME | P2 | | |\r\nGET_NAME | P2 | | |\r\nSET_MIXER | P2 | | |\r\nGET_MIXER | P2 | | |\r\nREGISTER_UNSOLICITED_NOTIFICATION | P2 | | |\r\nDEREGISTER_UNSOLICITED_NOTIFICATION | P2 | | |\r\nIDENTIFY_NOTIFICATION | P2 | | |\r\nGET_AVB_INFO | P2 | | |\r\nGET_AS_PATH | P2 | | |\r\nREBOOT | P2 | | |\r\nWRITE_DESCRIPTOR | P3 | | |\r\nSET_ASSOCIATION_ID | P3 | | |\r\nGET_ASSOCIATION_ID | P3 | | |\r\nINCREMENT_CONTROL | P3 | | |\r\nDECREMENT_CONTROL | P3 | | |\r\nSET_SIGNAL_SELECTOR | P3 | | |\r\nGET_SIGNAL_SELECTOR | P3 | | |\r\nSET_MATRIX | P3 | | |\r\nGET_MATRIX | P3 | | |\r\nGET_COUNTERS | P3 | | |\r\nGET_AUDIO_MAP | P3 | | |\r\nADD_AUDIO_MAPPINGS | P3 | | |\r\nREMOVE_AUDIO_MAPPINGS | P3 | | |\r\nSTART_OPERATION | P3 | | |\r\nABORT_OPERATION | P3 | | |\r\nOPERATION_STATUS | P3 | | |\r\nSET_VIDEO_FORMAT | P4 | | |\r\nGET_VIDEO_FORMAT | P4 | | |\r\nSET_SENSOR_FORMAT | P4 | | |\r\nGET_SENSOR_FORMAT | P4 | | |\r\nGET_VIDEO_MAP | P4 | | |\r\nADD_VIDEO_MAPPINGS | P4 | | |\r\nREMOVE_VIDEO_MAPPINGS | P4 | | |\r\nGET_SENSOR_MAP | P4 | | |\r\nADD_SENSOR_MAPPINGS | P4 | | |\r\nREMOVE_SENSOR_MAPPINGS | P4 | | |\r\n\r\n\r\n#### ToDo ####\r\n\r\n\r\n\r\nRelease Notes\r\n=============\r\n\r\nNone so far.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}