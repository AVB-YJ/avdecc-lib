/*
 * Licensed under the MIT License (MIT)
 *
 * Copyright (c) 2017 AudioScience Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * avdecc_steam_formats_main.cpp
 *
 * Testing avdecc-lib 1722 stream format conversions
 */

#include <iostream>
#include "util.h"

struct ieee1722_format
{
    uint64_t fmt_value;
    std::string fmt_name;
};

struct ieee1722_format ieee1722_format_table[] =
{
    // CRF AUDIO
    
    // 48 kHz, No Pull
    
    // TS Interval = 6, TS Count = 1
    {UINT64_C(0x041006010000BB80), "CRF_AUDIO_6-INTVL_1-TS_1.0-PULL_48000HZ"},
    // TS Interval = 6, TS Count = 16
    {UINT64_C(0x041006100000BB80), "CRF_AUDIO_6-INTVL_16-TS_1.0-PULL_48000HZ"},
    // TS Interval = 24, TS Count = 4
    {UINT64_C(0x041018040000BB80), "CRF_AUDIO_24-INTVL_4-TS_1.0-PULL_48000HZ"},
    // TS Interval = 96, TS Count = 1
    {UINT64_C(0x041060010000BB80), "CRF_AUDIO_96-INTVL_1-TS_1.0-PULL_48000HZ"},
    // TS Interval = 192, TS Count = 1
    {UINT64_C(0x0410C0010000BB80), "CRF_AUDIO_192-INTVL_1-TS_1.0-PULL_48000HZ"},
    // TS Interval = 480, TS Count = 1
    {UINT64_C(0x0411E0010000BB80), "CRF_AUDIO_480-INTVL_1-TS_1.0-PULL_48000HZ"},

    // AAF PCM
    
    // 8 kHz, 1..8 channel, 16, 24, 32
    {UINT64_C(0x0201021800406000), "AAF_8KHZ_INT32_24-BIT_1CH_6-SAMPLES"},
    {UINT64_C(0x0201021800806000), "AAF_8KHZ_INT32_24-BIT_2CH_6-SAMPLES"},
    {UINT64_C(0x0201021800c06000), "AAF_8KHZ_INT32_24-BIT_3CH_6-SAMPLES"},
    {UINT64_C(0x0201021801006000), "AAF_8KHZ_INT32_24-BIT_4CH_6-SAMPLES"},
    {UINT64_C(0x0201021801406000), "AAF_8KHZ_INT32_24-BIT_5CH_6-SAMPLES"},
    {UINT64_C(0x0201021801806000), "AAF_8KHZ_INT32_24-BIT_6CH_6-SAMPLES"},
    {UINT64_C(0x0201021801c06000), "AAF_8KHZ_INT32_24-BIT_7CH_6-SAMPLES"},
    {UINT64_C(0x0201021802006000), "AAF_8KHZ_INT32_24-BIT_8CH_6-SAMPLES"},
    {UINT64_C(0x0201021804006000), "AAF_8KHZ_INT32_24-BIT_16CH_6-SAMPLES"},
    {UINT64_C(0x0201021806006000), "AAF_8KHZ_INT32_24-BIT_24CH_6-SAMPLES"},
    {UINT64_C(0x0201021808006000), "AAF_8KHZ_INT32_24-BIT_32CH_6-SAMPLES"},
    
    // 48 kHz, 1, 2, 4, 8, 16, 24, 32 channel
    {UINT64_C(0x0205021800406000), "AAF_48KHZ_INT32_24-BIT_1CH_6-SAMPLES"},
    {UINT64_C(0x0205021800806000), "AAF_48KHZ_INT32_24-BIT_2CH_6-SAMPLES"},
    {UINT64_C(0x0205021801006000), "AAF_48KHZ_INT32_24-BIT_4CH_6-SAMPLES"},
    {UINT64_C(0x0205021802006000), "AAF_48KHZ_INT32_24-BIT_8CH_6-SAMPLES"},
    {UINT64_C(0x0205021804006000), "AAF_48KHZ_INT32_24-BIT_16CH_6-SAMPLES"},
    {UINT64_C(0x0205021806006000), "AAF_48KHZ_INT32_24-BIT_24CH_6-SAMPLES"},
    {UINT64_C(0x0205021808006000), "AAF_48KHZ_INT32_24-BIT_32CH_6-SAMPLES"},
    
    // 96 kHz, 1, 2, 4, 8, 16, 24, 32  32 channel
    {UINT64_C(0x020702180040C000), "AAF_96KHZ_INT32_24-BIT_1CH_12-SAMPLES"},
    {UINT64_C(0x020702180080C000), "AAF_96KHZ_INT32_24-BIT_2CH_12-SAMPLES"},
    {UINT64_C(0x020702180100C000), "AAF_96KHZ_INT32_24-BIT_4CH_12-SAMPLES"},
    {UINT64_C(0x020702180200C000), "AAF_96KHZ_INT32_24-BIT_8CH_12-SAMPLES"},
    {UINT64_C(0x020702180400C000), "AAF_96KHZ_INT32_24-BIT_16CH_12-SAMPLES"},
    {UINT64_C(0x020702180600C000), "AAF_96KHZ_INT32_24-BIT_24CH_12-SAMPLES"},
    {UINT64_C(0x020702180800C000), "AAF_96KHZ_INT32_24-BIT_32CH_12-SAMPLES"},
    
    ///////////////////////////////////////////////////////////////////
    
    // IEC61883-6 AM824
    
    // 44.1 kHz, 1..8 channel
    {UINT64_C(0x00a0010140000100), "IEC61883-6_AM824_MBLA_44.1KHZ_1CH"},
    {UINT64_C(0x00a0010240000200), "IEC61883-6_AM824_MBLA_44.1KHZ_2CH"},
    {UINT64_C(0x00a0010340000300), "IEC61883-6_AM824_MBLA_44.1KHZ_3CH"},
    {UINT64_C(0x00a0010440000400), "IEC61883-6_AM824_MBLA_44.1KHZ_4CH"},
    {UINT64_C(0x00a0010540000500), "IEC61883-6_AM824_MBLA_44.1KHZ_5CH"},
    {UINT64_C(0x00a0010640000600), "IEC61883-6_AM824_MBLA_44.1KHZ_6CH"},
    {UINT64_C(0x00a0010740000700), "IEC61883-6_AM824_MBLA_44.1KHZ_7CH"},
    {UINT64_C(0x00a0010840000800), "IEC61883-6_AM824_MBLA_44.1KHZ_8CH"},
    
    // 48 kHz, 1..8, 16, 24, 32 channel
    {UINT64_C(0x00a0020140000100), "IEC61883-6_AM824_MBLA_48KHZ_1CH"},
    {UINT64_C(0x00a0020240000200), "IEC61883-6_AM824_MBLA_48KHZ_2CH"},
    {UINT64_C(0x00a0020340000300), "IEC61883-6_AM824_MBLA_48KHZ_3CH"},
    {UINT64_C(0x00a0020440000400), "IEC61883-6_AM824_MBLA_48KHZ_4CH"},
    {UINT64_C(0x00a0020540000500), "IEC61883-6_AM824_MBLA_48KHZ_5CH"},
    {UINT64_C(0x00a0020640000600), "IEC61883-6_AM824_MBLA_48KHZ_6CH"},
    {UINT64_C(0x00a0020740000700), "IEC61883-6_AM824_MBLA_48KHZ_7CH"},
    {UINT64_C(0x00a0020840000800), "IEC61883-6_AM824_MBLA_48KHZ_8CH"},
    {UINT64_C(0x00a0021040001000), "IEC61883-6_AM824_MBLA_48KHZ_16CH"},
    {UINT64_C(0x00a0021840001800), "IEC61883-6_AM824_MBLA_48KHZ_24CH"},
    {UINT64_C(0x00a0022040002000), "IEC61883-6_AM824_MBLA_48KHZ_32CH"},
    
    // 88.2 kHz, 1..8 channel
    {UINT64_C(0x00a0030140000100), "IEC61883-6_AM824_MBLA_88.2KHZ_1CH"},
    {UINT64_C(0x00a0030240000200), "IEC61883-6_AM824_MBLA_88.2KHZ_2CH"},
    {UINT64_C(0x00a0030340000300), "IEC61883-6_AM824_MBLA_88.2KHZ_3CH"},
    {UINT64_C(0x00a0030440000400), "IEC61883-6_AM824_MBLA_88.2KHZ_4CH"},
    {UINT64_C(0x00a0030540000500), "IEC61883-6_AM824_MBLA_88.2KHZ_5CH"},
    {UINT64_C(0x00a0030640000600), "IEC61883-6_AM824_MBLA_88.2KHZ_6CH"},
    {UINT64_C(0x00a0030740000700), "IEC61883-6_AM824_MBLA_88.2KHZ_7CH"},
    {UINT64_C(0x00a0030840000800), "IEC61883-6_AM824_MBLA_88.2KHZ_8CH"},
    
    // 96 kHz, 1..8, 16, 24, 32 channel
    {UINT64_C(0x00a0040140000100), "IEC61883-6_AM824_MBLA_96KHZ_1CH"},
    {UINT64_C(0x00a0040240000200), "IEC61883-6_AM824_MBLA_96KHZ_2CH"},
    {UINT64_C(0x00a0040340000300), "IEC61883-6_AM824_MBLA_96KHZ_3CH"},
    {UINT64_C(0x00a0040440000400), "IEC61883-6_AM824_MBLA_96KHZ_4CH"},
    {UINT64_C(0x00a0040540000500), "IEC61883-6_AM824_MBLA_96KHZ_5CH"},
    {UINT64_C(0x00a0040640000600), "IEC61883-6_AM824_MBLA_96KHZ_6CH"},
    {UINT64_C(0x00a0040740000700), "IEC61883-6_AM824_MBLA_96KHZ_7CH"},
    {UINT64_C(0x00a0040840000800), "IEC61883-6_AM824_MBLA_96KHZ_8CH"},
    {UINT64_C(0x00a0041040001000), "IEC61883-6_AM824_MBLA_96KHZ_16CH"},
    {UINT64_C(0x00a0041840001800), "IEC61883-6_AM824_MBLA_96KHZ_24CH"},
    {UINT64_C(0x00a0042040002000), "IEC61883-6_AM824_MBLA_96KHZ_32CH"},
    
    // 176.4 kHz, 1..8 channel
    {UINT64_C(0x00a0050140000100), "IEC61883-6_AM824_MBLA_176.4KHZ_1CH"},
    {UINT64_C(0x00a0050240000200), "IEC61883-6_AM824_MBLA_176.4KHZ_2CH"},
    {UINT64_C(0x00a0050340000300), "IEC61883-6_AM824_MBLA_176.4KHZ_3CH"},
    {UINT64_C(0x00a0050440000400), "IEC61883-6_AM824_MBLA_176.4KHZ_4CH"},
    {UINT64_C(0x00a0050540000500), "IEC61883-6_AM824_MBLA_176.4KHZ_5CH"},
    {UINT64_C(0x00a0050640000600), "IEC61883-6_AM824_MBLA_176.4KHZ_6CH"},
    {UINT64_C(0x00a0050740000700), "IEC61883-6_AM824_MBLA_176.4KHZ_7CH"},
    {UINT64_C(0x00a0050840000800), "IEC61883-6_AM824_MBLA_176.4KHZ_8CH"},
    
    // 192 kHz, 1..8 channel
    {UINT64_C(0x00A0060140000100), "IEC61883-6_AM824_MBLA_192KHZ_1CH"},
    {UINT64_C(0x00A0060240000200), "IEC61883-6_AM824_MBLA_192KHZ_2CH"},
    {UINT64_C(0x00A0060340000300), "IEC61883-6_AM824_MBLA_192KHZ_3CH"},
    {UINT64_C(0x00A0060440000400), "IEC61883-6_AM824_MBLA_192KHZ_4CH"},
    {UINT64_C(0x00A0060540000500), "IEC61883-6_AM824_MBLA_192KHZ_5CH"},
    {UINT64_C(0x00A0060640000600), "IEC61883-6_AM824_MBLA_192KHZ_6CH"},
    {UINT64_C(0x00A0060740000700), "IEC61883-6_AM824_MBLA_192KHZ_7CH"},
    {UINT64_C(0x00A0060840000800), "IEC61883-6_AM824_MBLA_192KHZ_8CH"},
};

int main()
{
    unsigned int am824_format_table_size = (sizeof(ieee1722_format_table) / sizeof(ieee1722_format_table[0]));
    for (size_t i = 0; i < am824_format_table_size; i++)
    {
        struct ieee1722_format * p = &ieee1722_format_table[i];
        
        // value -> name
        std::string translated_name = avdecc_lib::utility::ieee1722_format_value_to_name(p->fmt_value);
        if (translated_name.compare(p->fmt_name) != 0)
        {
            std::cout << "ERROR: value -> name, " << std::hex << p->fmt_value <<
                " Expected: " << p->fmt_name << ", Got: " << translated_name << std::endl;
            return 1;
        }
        
        // name -> value
        uint64_t translated_value = avdecc_lib::utility::ieee1722_format_name_to_value(p->fmt_name.c_str());
        if (translated_value != p->fmt_value)
        {
            std::cout << "ERROR: name -> value, " << p->fmt_name <<
                " Expected: " << p->fmt_value << ", Got: " << translated_value << std::endl;
            return 1;
        }
    }
    
    std::cout << "Passed" << std::endl;
    return 0;
}
